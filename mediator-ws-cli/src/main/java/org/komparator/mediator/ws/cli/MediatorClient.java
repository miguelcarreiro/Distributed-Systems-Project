package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.lang.reflect.InvocationTargetException;
import java.net.ConnectException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.xml.ws.BindingProvider;
import org.komparator.mediator.ws.*;

import com.oracle.webservices.api.message.ReadOnlyPropertyException;
import com.sun.xml.ws.client.ClientTransportException;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {

    // /** WS service */
    MediatorService service = null;

    // /** WS port (port type is the interface, port is the implementation) */
    MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL
    
    private int counter = 0;

    public String getWsURL() {
        return wsURL;
    }
    
    private int timerRate = 5000;
    
    private SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
        service = new MediatorService();
        port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider
                    .getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }


    // remote invocation methods ----------------------------------------------
    
    
    @Override
	public void clear() {
    	boolean connected = false;
    	while (connected  == false){
    		try{
        		port.clear();
        		connected = true;
        	} catch (Exception e){
        		connect();
        	}
    	}
	}

    @Override
	public String ping(String arg0){
    	String result = null;
    	boolean connected = false;
    	while (connected  == false){
    		try{
        		result = port.ping(arg0);
        		connected = true;
        	} catch (Exception e){
        		connect();
        	}
    	}
    	return result;
	}

    @Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
      	List<ItemView> result = null;
      	boolean connected = false;
      	while(connected == false){
	    	try{
	    		result = port.searchItems(descText);
	    		connected = true;
	    	} catch (InvalidText_Exception it){
	    		throw it;
	    	} catch (Exception e){
	    		connect();
	    	}
      	}

    	return result;
	}

    @Override
	public List<CartView> listCarts() {
      	List<CartView> result = null;
      	boolean connected = false;
      	while(connected == false)
	    	try{
	    		result = port.listCarts();
	    		connected = true;
	    	} catch (Exception e){
	    		connect();
	    	}
    	return result;
	}

	@Override
	public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
      	List<ItemView> result = null;
      	boolean connected = false;
      	while(connected == false){
	    	try{
	    		result = port.getItems(productId);
	    		connected = true;
	    	} catch(InvalidItemId_Exception it){
	    		throw it;
	    	} catch (Exception e){
	    		connect();
	    	}
      	}
    	return result;
	}

	@Override
	public ShoppingResultView buyCartWithId(String cartId, String creditCardNr, String valueString)
			throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
      	ShoppingResultView result = null;
      	boolean connected = false;
      	while(connected == false){
	    	try{
	    		result = port.buyCartWithId(cartId, creditCardNr, valueString);
	    		connected = true;
	    	} catch(EmptyCart_Exception | InvalidCartId_Exception | InvalidCreditCard_Exception e){
	    		throw e;
	    	} catch (Exception e){
	    		connect();
	    	}
      	}
    	return result;
	}
	
	public synchronized ShoppingResultView buyCart(String cartId, String creditCardNr) throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception{
		String valueString = dateFormatter.format(new Date());
		return buyCartWithId(cartId, creditCardNr, valueString);
	}

	@Override
	public void addToCartWithId(String cartId, ItemIdView itemId, int itemQty, String valueString) throws InvalidCartId_Exception,
			InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
    	boolean connected = false;
    	while(connected == false){
			try{
	    		port.addToCartWithId(cartId, itemId, itemQty, valueString);
	    		connected = true;
	    	} catch (InvalidCartId_Exception | InvalidItemId_Exception | InvalidQuantity_Exception | NotEnoughItems_Exception e) {
	    		throw e;
	    	} catch (Exception e){
	    		connect();
	    	}
    	}
	}
	
	public synchronized void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
	InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception{
		String valueString = dateFormatter.format(new Date());
		addToCartWithId(cartId, itemId, itemQty, valueString);
	}

	@Override
	public List<ShoppingResultView> shopHistory() {
		List<ShoppingResultView> result = null;
		boolean connected = false;
		while(connected == false){
	    	try{
	    		result = port.shopHistory();
	    		connected = true;
	    	} catch (Exception e){
	    		connect();
	    	}
		}
    	return result;

	}
	
	@Override
	public void imAlive() {
		 BindingProvider bindingProvider = (BindingProvider) port;
         Map<String, Object> requestContext = bindingProvider
                 .getRequestContext();
         requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
         final List<String> CONN_TIME_PROPS = new ArrayList<String>();
         CONN_TIME_PROPS.add("com.sun.xml.ws.connect.timeout");
         CONN_TIME_PROPS.add("com.sun.xml.internal.ws.connect.timeout");
         CONN_TIME_PROPS.add("javax.xml.ws.client.connectionTimeout");

         for (String propName : CONN_TIME_PROPS)
             requestContext.put(propName, getTimerRate());
         System.out.printf("Set connection timeout to %d milliseconds%n", getTimerRate());
		 
         port.imAlive();
	}

	@Override
	public void updateCart(CartView cart) {
    	boolean connected = false;
    	while(connected == false){
			try{
	    		port.updateCart(cart);
	    		connected = true;
	    	} catch (Exception e){

	    	}
    	}

	}

	@Override
	public void updateShopHistory(ShoppingResultView shopping) {
		boolean connected = false;
		while(connected == false){
			try{
	    		port.updateShopHistory(shopping);
	    		connected = true;
	    	} catch (Exception e){

	    	}
		}

	}
	
	private void connect(){
		System.out.println("Connection error: pausing");
		try{
			Thread.sleep(getTimerRate()*3);
			uddiLookup();
			createStub();
			System.out.println("Connection restored: continuing process");
		} catch(Exception e){
			
		} 
		
	}
	
	public void setTimerRate(int rate){
		this.timerRate = rate;
	}
	
	public int getTimerRate(){
		return this.timerRate;
	}
 
}